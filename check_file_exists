#!/usr/bin/env python3
import argparse
import sys
import os
import textwrap

def nagios_exit(message, code):
    print(message)
    sys.exit(code)

try:
    parser = argparse.ArgumentParser(
            description='Check for the (non) existence of a file',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent('''\
                To check for pending reboots on Debian/Ubuntu:  
                    
                %(prog)s -f /var/run/reboot-required --absent  
            '''))
    parser.add_argument('-f', '--file',
            dest='path',
            help='file to check',
            required=True)
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--present',
            default=True,
            dest='status',
            help='return OK if file exists, and CRITICAL if file does not exist',
            action='store_true')
    group.add_argument('--absent',
            default=False,
            dest='status',
            help='return OK if file does not exist, and CRITICAL if it exists',
            action='store_false')
    args = parser.parse_args()

    path = args.path
    status = args.status

    # start with clean slate
    ok_msg = []
    warn_msg = []
    crit_msg = []

    found = os.path.isfile(path)

    msg = "File " + path + " " + ("" if found else "not ") + "found"

    if(found == status):
        ok_msg.append(msg)
    else:
        crit_msg.append(msg)

except Exception as e:
  nagios_exit("UNKNOWN: Unknown error: {0}.".format(e), 3)

# Exit with accumulated message(s)
if crit_msg:
    nagios_exit("CRITICAL: " + ' '.join(crit_msg + warn_msg), 2)
elif warn_msg:
    nagios_exit("WARNING: " + ' '.join(warn_msg), 1)
else:
    nagios_exit("OK: " + ' '.join(ok_msg), 0)
